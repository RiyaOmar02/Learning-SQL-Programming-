# The following analysis utilizes data from the database at this link: https://github.com/LinkedInLearning/learningsql-2875059.git
# The data quantifies quiz competition information for 1000 participants across the United States.


# Analysis


# How many entries are in each table?

SELECT COUNT(*)
FROM people
;

SELECT COUNT(*)
FROM states
;


# What is the average age of the participants?

SELECT AVG(age)
FROM people
;


# How many participants signed up in each state?

SELECT state_code, COUNT(*)
FROM people
GROUP BY state_code
ORDER BY COUNT(*) DESC
;


# Provide all the participants who requested a hat.

SELECT first_name, last_name
FROM people
WHERE shirt_or_hat = 'hat'
;


# How many participants requested each type of gift?

SELECT shirt_or_hat, COUNT(shirt_or_hat)
FROM people
GROUP BY shirt_or_hat
;


# Provide a list of all the participants in California who requested a shirt.

SELECT first_name, last_name
FROM people
WHERE state_code = 'CA' 
    AND shirt_or_hat = 'shirt'
;


# Provide a list of all the participants who requested a hat in the West Coast states. Include their state in the list.

SELECT state_code, first_name, last_name
FROM people
WHERE state_code IN ('WA', 'OR', 'CA')
    AND shirt_or_hat = 'hat'
;


# How many different teams participated in the quiz competition?

SELECT DISTINCT team, COUNT(team)
FROM people
GROUP BY team
;


# Provide all the records for participants whose state starts with an A.

SELECT *
FROM people
WHERE state_code LIKE 'A%'
;


# Provide a list of participants whose last names start with M for the registration team to use at check-in. 

SELECT last_name, first_name
FROM people
WHERE last_name LIKE 'M%'
ORDER BY last_name, first_name
;


# Which participant has the longest name?

SELECT first_name, last_name, LENGTH(CONCAT(first_name, ' ', last_name)) AS full_name
FROM people
ORDER BY full_name DESC
;
 

# Create a list of participants in Colorado. Organize the lsit so that participants are sorted by their 
# team name, the gift they want, and by their last name. Use descending order for the last names and 
# ascending order for the other sort fields.

SELECT team, shirt_or_hat, first_name, last_name
FROM people
WHERE state_code = 'CO'
ORDER BY team ASC, shirt_or_hat ASC, last_name DESC
;


# How many people in each state earned each score?

SELECT state_code, quiz_points, COUNT(quiz_points)
FROM people
GROUP BY state_code, quiz_points
;


# How many participants are there from each region of the United States?

SELECT states.division, COUNT(*)
FROM people
LEFT JOIN states 
ON people.state_code = states.state_abbrev
GROUP BY states.division
ORDER BY states.division
;


# How many team members are in each region?

SELECT s.region, p.team, COUNT(p.team)
FROM people p
LEFT JOIN states s
ON p.state_code = s.state_abbrev
GROUP BY s.region, p.team
ORDER BY s.region, p.team
;


# Are there any states that did not have participants in the quiz competition?

SELECT DISTINCT(people.state_code), states.state_abbrev
FROM states
LEFT JOIN people
ON people.state_code = states.state_abbrev   
ORDER BY people.state_code
;


# What was the maximum and minimum quiz points from the competition, and what is the difference in these values?

SELECT MAX(quiz_points) AS Max, MIN(quiz_points) AS Min, MAX(quiz_points) - MIN(quiz_points) AS Difference
FROM people
;


# Which participants scored 80 or more points in the competition?

SELECT first_name, last_name, quiz_points
FROM people
WHERE quiz_points >= 80
ORDER BY quiz_points DESC
;


# What was the average number of points earned by each team?

SELECT team, ROUND(AVG(quiz_points) , 2) AS avg_points
FROM people
GROUP BY team
ORDER BY avg_points DESC
;


# Provide all records for participants from Minnesota.

SELECT *
FROM people
WHERE state_code = (
    SELECT state_abbrev
    FROM states
    WHERE state_name = 'Minnesota'
    )
ORDER BY last_name, first_name
;


# How many people signed up on each day of January?

SELECT signup, COUNT(*)
FROM people
GROUP BY signup
;


# Write a query that returns the maximum and average scores for each state, along with the 
# state name, sorted from highest to lowest average score.

SELECT s.state_name AS state, MAX(p.quiz_points) AS maxpoints, ROUND(AVG(p.quiz_points) , 2) AS avgpoints
FROM people p
LEFT JOIN states s
ON p.state_code = s.state_abbrev
GROUP BY p.state_code
ORDER BY AVG(p.quiz_points) DESC
;


