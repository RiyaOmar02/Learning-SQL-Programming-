# The following analysis was used on a dataset called chinook (https://cdn.fs.teachablecdn.com/dRmwOLQsS22FVFbXfh3x), which represents a 
# digital media store and includes tables for artists, albums, media tracks, invoices, and customers.

# First, I wanted to get familaar with the tables in this database before analyzing the data.

SELECT name
FROM sqlite_master
WHERE type = 'table'


# Once I was familiar with the databases, I began analysis:

# Show Customers (their full names, customer ID, and country) who are not in the US.

SELECT firstname, lastname, customerid, country
FROM chinook.customers
WHERE country <> 'USA'
;


# How many customers are in each country that is not the US?

SELECT country, COUNT(country)
FROM chinook.customers
WHERE country <> 'USA'
GROUP BY country
;


# Show only the Customers from Brazil.

SELECT *
FROM chinook.customers
WHERE country = 'Brazil'
;


# Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date 
# of the invoice, and billing country.

SELECT c.firstname, c.lastname, i.invoiceid, i.invoicedate, i.billingcountry
FROM invoices i
LEFT JOIN customers c
ON i.customerid = c.CustomerId
WHERE i.billingcountry = 'Brazil'
;


# Show the average spent per country in descending order.

SELECT billingcountry, ROUND(AVG(total) , 2 ) AS 'average_spent'
FROM invoices
GROUP BY billingcountry
ORDER BY average_spent' DESC
;


# Show the Employees who are Sales Agents.

SELECT *
FROM employees
WHERE title LIKE 'Sales%Agent'
;


# Find a unique/distinct list of billing countries from the Invoice table.

SELECT DISTINCT billingcountry
FROM invoices
;


# Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.

SELECT e.firstname, e.lastname, i.invoiceid
FROM employees e
JOIN customers c
    ON e.employeeid = c.supportrepid
JOIN invoices i
    ON c.customerid = i.customerid
  ;


# Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.

SELECT i.total, c.firstname AS 'Cust First', c.lastname AS 'Cust Last', c.country, e.firstname AS 'Agent First', e.lastname AS 'Agent Last'
FROM customers c
JOIN invoices i
    ON c.customerid = i.customerid
JOIN employees e
    ON c.supportrepid = e.employeeid
;


# How many Invoices were there in 2009?

SELECT COUNT(invoicedate)
FROM invoices
WHERE invoicedate LIKE '2009%'
;


# What are the total sales for 2009?

SELECT SUM(total)
FROM invoices
WHERE invoicedate LIKE '2009%'
;


# Show the total earnings for each year ordered by descending earnings.

SELECT strftime('%Y', invoicedate) AS year, ROUND(SUM(total) , 2) AS year_total
FROM invoices
GROUP BY year
ORDER BY year_total DESC
;


# Write a query that includes the purchased track name with each invoice line ID.

SELECT t.name, items.invoicelineid
FROM invoice_items items
JOIN tracks t
ON items.trackid = t.trackid
;


# Write a query that includes the purchased track name AND artist name with each invoice line ID.

SELECT t.name AS 'Track', artists.name AS 'Artist', items.invoicelineid
FROM invoice_items items
LEFT JOIN tracks t
    ON items.trackid = t.trackid
JOIN albums
    ON t.albumid = albums.albumid
JOIN artists
    ON artists.artistid = albums.artistid
;


# Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.

SELECT tracks.name AS 'Track', albums.title AS 'Album', genres.name AS 'Genre', media.name AS 'Media Type'
FROM tracks
LEFT JOIN albums
    ON tracks.albumid = albums.AlbumId
LEFT JOIN genres
    ON tracks.genreid = genres.GenreId
LEFT JOIN media_types media
    ON tracks.mediatypeid = media.mediatypeid
;


# Show the total sales made by each sales agent.

SELECT e.firstname, e.lastname, SUM(i.total) AS 'total_sales'
FROM employees e
LEFT JOIN customers c
    ON e.employeeid = c.SupportRepId
JOIN invoices i
    ON i.customerid = c.CustomerId
WHERE e.title LIKE 'Sales%'
GROUP BY c.supportrepid
;

# Since total sales is a dollar amount, I took the additional step to round the total to the hundredths place. 

SELECT e.firstname, e.lastname, ROUND(SUM(i.total) , 2 ) AS 'total_sales'
FROM employees e
LEFT JOIN customers c
    ON e.employeeid = c.SupportRepId
JOIN invoices i
    ON i.customerid = c.CustomerId
WHERE e.title LIKE 'Sales%'
GROUP BY c.supportrepid
;


# Which sales agent made the most dollars in sales in 2009?

SELECT e.firstname, e.lastname, ROUND(SUM(i.total) , 2 ) AS 'total_sales'
FROM employees e
LEFT JOIN customers c
    ON e.employeeid = c.SupportRepId
JOIN invoices i
    ON i.customerid = c.CustomerId
WHERE e.title LIKE 'Sales%'
    AND invoicedate LIKE '2009%'
GROUP BY c.supportrepid
ORDER BY total_sales DESC
LIMIT 1
;


# Which tracks are the most popular?
# Note: in seeking an to answer my question, most track where bought only once or twice, so I narrowed 
# the list to those tracks that were bought more than once. 

WITH counttracks AS (
    SELECT trackid, COUNT(trackid) AS track_count
    FROM invoice_items
    GROUP BY trackid
    )
SELECT i.trackid, t.name, track_count
FROM counttracks i
LEFT JOIN tracks t
ON i.trackid = t.trackid
WHERE track_count > 1
ORDER BY t.name
;

# This list still proved too long to be useful, so I counted how many songs fit into this category. 

WITH counttracks AS (
    SELECT trackid, COUNT(trackid) AS track_count
    FROM invoice_items
    GROUP BY trackid
    )
SELECT COUNT(i.trackid)
FROM counttracks i
LEFT JOIN tracks t
ON i.trackid = t.trackid
WHERE track_count > 1
ORDER BY t.name
;


# 
